from enum import Enum
import hashlib



class TOKEN_AUTHENTICATION_DATA_TYPE(Enum):
    JSON = 0
    YAML = 1

class TOKEN_AUTHENTICATION_HASHING(Enum):
    MD5 = 0
    SHA256 = 1
    SHA384 = 2

class TOKEN_AUTHENTICATION_ENCRYPTION(Enum):
    OFF = 0
    AES = 1
    BLOWFISH = 1

class TOKEN_AUTHENTICATION_POSITION(Enum):
    JSON_BODY = 0
    QUERY_PARAMETER = 1


TOKEN_AUTHENTICATION_CONFIG = {
    'DATA_ENCRYPT': TOKEN_AUTHENTICATION_ENCRYPTION.OFF,
    'TOKEN_HASHING': TOKEN_AUTHENTICATION_HASHING.SHA384,
    'PASSWORD_HASHING': TOKEN_AUTHENTICATION_HASHING.SHA384,
    'EXPIRE_SECONDS': 0,
    'EXPIRE_MINUTES': 99999999,
    'EXPIRE_DAYS': 0,
    'DATA_TYPE': TOKEN_AUTHENTICATION_DATA_TYPE.JSON,
    'MAX_TOKEN_LENGTH': 500,
    'SUPPORTED_METHODS': ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    'TOKEN_POSITION': TOKEN_AUTHENTICATION_POSITION.JSON_BODY,
    'TOKEN_KEY_NAME': 'token'
}

HASHING_MAP = {
    TOKEN_AUTHENTICATION_HASHING.MD5: hashlib.md5,
    TOKEN_AUTHENTICATION_HASHING.SHA256: hashlib.sha256,
    TOKEN_AUTHENTICATION_HASHING.SHA384: hashlib.sha384
}

__token_hashing_function = HASHING_MAP[TOKEN_AUTHENTICATION_CONFIG['TOKEN_HASHING']]

def token_hash(data, safe_length=True):
    token = __token_hashing_function(data)
    token = token.hexdigest()
    if safe_length:
        token = token[:TOKEN_AUTHENTICATION_CONFIG['MAX_TOKEN_LENGTH']]
    return token


    
